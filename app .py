# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pzsHUudV2H8SGBsFP5cRUCgrk9EXRFDf
"""

# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from typing import List, Dict, Any
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

st.set_page_config(page_title="Capstone Predictor", page_icon="ðŸ“Š", layout="centered")

@st.cache_resource
def load_bundle():
    bundle = joblib.load("model.pkl")
    pipe = bundle["pipeline"]
    num_cols: List[str] = bundle.get("num_cols", [])
    cat_cols: List[str] = bundle.get("cat_cols", [])
    cat_choices: Dict[str, List[str]] = bundle.get("cat_choices", {})
    threshold_default: float = float(bundle.get("threshold_default", 0.40))
    target_col: str = bundle.get("target_col", "Success (0/1)")
    return pipe, num_cols, cat_cols, cat_choices, threshold_default, target_col

pipe, num_cols, cat_cols, cat_choices, threshold_default, target_col = load_bundle()

st.title("ðŸ“Š Capstone Predictive Model")
st.caption("Upload CSV for batch scoring or enter a single row below.")

# -------- Batch predictions --------
uploaded = st.file_uploader("Upload CSV for batch predictions", type=["csv"])
if uploaded:
    df = pd.read_csv(uploaded)
    with st.spinner("Scoring..."):
        if hasattr(pipe, "predict_proba"):
            df["proba"] = pipe.predict_proba(df)[:, 1]
            thr_batch = st.slider("Decision threshold (batch)", 0.0, 1.0, float(threshold_default), 0.01, key="thr_batch")
            df["prediction"] = (df["proba"] >= thr_batch).astype(int)
        else:
            df["prediction"] = pipe.predict(df)

    st.dataframe(df.head(50))
    st.download_button("Download predictions.csv", df.to_csv(index=False).encode(), "predictions.csv")

st.divider()
st.subheader("Single-row prediction")

with st.form("single_row"):
    ui_vals: Dict[str, Any] = {}

    if num_cols:
        st.markdown("**Numeric features**")
        for col in num_cols:
            ui_vals[col] = st.number_input(col, value=0.0, step=1.0, format="%.4f")

    if cat_cols:
        st.markdown("**Categorical features**")
        for col in cat_cols:
            choices = cat_choices.get(col)
            if choices and len(choices) > 0:
                ui_vals[col] = st.selectbox(col, choices, index=0)
            else:
                ui_vals[col] = st.text_input(col, "")

    thr_single = st.slider("Decision threshold (single)", 0.0, 1.0, float(threshold_default), 0.01, key="thr_single")
    submitted = st.form_submit_button("Predict")

if submitted:
    X = pd.DataFrame([ui_vals])

    if hasattr(pipe, "predict_proba"):
        prob = float(pipe.predict_proba(X)[:, 1][0])
        pred = int(prob >= thr_single)
        st.metric("Probability (class = 1)", f"{prob:.4f}")
        st.write(f"**Prediction:** {pred} (threshold = {thr_single:.2f})")
    else:
        yhat = pipe.predict(X)[0]
        st.write(f"**Prediction:** {yhat}")

with st.expander("Debug: model & column info"):
    st.write({"num_cols": num_cols, "cat_cols": cat_cols, "target_col": target_col})