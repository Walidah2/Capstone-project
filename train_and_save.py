# -*- coding: utf-8 -*-
"""train_and_save

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YzXzqs4BrigrZRhjzIATqs6HWbaVKV_J
"""

# -*- coding: utf-8 -*-
"""
Train & Save (Logistic Regression) + lookups
- Builds pipeline (scale numeric + one-hot categorical)
- Trains Logistic Regression
- Saves bundle to model.pkl including:
  - avg_salary_by_assignee  (for Assignee -> Salary auto-fill)
  - div_success_by_division (for Division -> Division Success Rate auto-fill)
  - num/cat column lists, cat choices, default threshold, target col
"""

from pathlib import Path
import pandas as pd
import numpy as np
import joblib

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    classification_report, confusion_matrix
)
from sklearn.model_selection import train_test_split

EXCEL_PATH = Path("Capstone Project - Raw Data (7).xlsx")   # put the file next to this script
TARGET_COL  = "Success (0/1)"                                # adjust if your target name differs

# Columns you used before
NUM_COLS = ["Salary", "Time Working on Project", "Division Success Rate"]
CAT_COLS = ["Assignee", "Title", "Deadline", "Division", "Category", "Sub Category"]

THRESHOLD_DEFAULT = 0.40

def train_and_save():
    # ---- Load ----
    df = pd.read_excel(EXCEL_PATH)

    # Keep only columns that exist in the sheet
    num_cols = [c for c in NUM_COLS if c in df.columns and c != TARGET_COL]
    cat_cols = [c for c in CAT_COLS if c in df.columns and c != TARGET_COL]

    # ---- Lookups for auto-fill in app ----
    # Average Salary by Assignee
    if "Assignee" in df.columns and "Salary" in df.columns:
        avg_salary_by_assignee = (
            df[["Assignee", "Salary"]]
            .dropna(subset=["Assignee"])
            .groupby("Assignee")["Salary"]
            .mean()
            .round(2)
            .to_dict()
        )
    else:
        avg_salary_by_assignee = {}

    # Division Success Rate by Division (from the column in your sheet)
    if "Division" in df.columns and "Division Success Rate" in df.columns:
        div_success_by_division = (
            df[["Division", "Division Success Rate"]]
            .dropna(subset=["Division"])
            .groupby("Division")["Division Success Rate"]
            .mean()
            .round(4)
            .to_dict()
        )
    else:
        div_success_by_division = {}

    # Also collect categorical choices (for dropdowns)
    cat_choices = {}
    for col in cat_cols:
        vals = df[col].dropna().astype(str).unique().tolist()
        cat_choices[col] = sorted(vals)[:100]

    # ---- Split ----
    X = df.drop(columns=[TARGET_COL])
    y = df[TARGET_COL]

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y
    )

    # ---- Pipeline ----
    pre = ColumnTransformer([
        ("num", StandardScaler(), num_cols),
        ("cat", OneHotEncoder(handle_unknown="ignore", sparse_output=False), cat_cols),
    ])

    clf = LogisticRegression(max_iter=5000)
    pipe = Pipeline([("pre", pre), ("model", clf)])
    pipe.fit(X_train, y_train)

    # ---- Quick eval at the appâ€™s threshold ----
    proba = pipe.predict_proba(X_test)[:, 1]
    yhat = (proba >= THRESHOLD_DEFAULT).astype(int)
    print("=== Evaluation @ 0.40 ===")
    print("Acc:", round(accuracy_score(y_test, yhat), 4))
    print("Pre:", round(precision_score(y_test, yhat, zero_division=0), 4))
    print("Rec:", round(recall_score(y_test, yhat, zero_division=0), 4))
    print("F1 :", round(f1_score(y_test, yhat, zero_division=0), 4))
    print("\nClassification report:\n", classification_report(y_test, yhat, digits=4))
    print("Confusion matrix:\n", confusion_matrix(y_test, yhat))

    # ---- Save everything the app needs ----
    bundle = {
        "pipeline": pipe,
        "num_cols": num_cols,
        "cat_cols": cat_cols,
        "cat_choices": cat_choices,
        "avg_salary_by_assignee": avg_salary_by_assignee,
        "div_success_by_division": div_success_by_division,
        "target_col": TARGET_COL,
        "threshold_default": THRESHOLD_DEFAULT,
    }
    joblib.dump(bundle, "model.pkl", compress=3)
    print("Saved model.pkl with lookups.")

if __name__ == "__main__":
    train_and_save()